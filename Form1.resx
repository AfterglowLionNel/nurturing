<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4QA2RXhpZgAATU0AKgAAAAgAAQExAAIAAAAUAAAAGgAAAABBZG9i
        ZSBFeHByZXNzIDEuMC4wAP/bAEMAAwICAgICAwICAgMDAwMEBgQEBAQECAYGBQYJCAoKCQgJCQoMDwwK
        Cw4LCQkNEQ0ODxAQERAKDBITEhATDxAQEP/bAEMBAwMDBAMECAQECBALCQsQEBAQEBAQEBAQEBAQEBAQ
        EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEP/AABEIARgAvAMBEQACEQEDEQH/xAAfAAAB
        BQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYT
        UWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFla
        Y2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
        0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEK
        FiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeI
        iYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
        9vf4+fr/2gAMAwEAAhEDEQA/AP1ToAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK
        ACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACg
        AoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
        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
        oAKACgAoAKAPJ/j/AKUni3wq/hyy0xby7huILgylR/ow3gDDHozZxgc7SSeOvfgOWFTnm7I+h4dqrCYp
        V6krR1Xrp+SO08Az3UnhWyg1JXS8tENtcI+NyOhxg/hjnuMGubEpKq3DZnmZlGH1qUqfwvVejPKE8M3d
        x8bpPiZdaa2o2yxP9iVyWdII9sbPGmOSGJYdyCccmvQvT+q+yvaR9A8TTjlKwMXaV9fV62f5HvEMsc8K
        TRMGR1DKR3BryXofJNNOzH0CCgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgCvd2FtexrFcR
        7lWRJcZx8ykEfqBTTcdUVCbg7xJVijTcVQAucsQOp96RJF9gtftEVz5IEkKNHGRxtVsZH/jo/Knd2sVz
        Ozj3LFIkKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKA
        CgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgA
        oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK
        ACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACg
        AoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
        KACgAoAKACgAoAKACgAoAKAP/9k=
</value>
  </data>
</root>